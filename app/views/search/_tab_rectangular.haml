%p
  The rectangular search will return all objects in the SkyMapper catalogue that fall within the specified right ascension and declination ranges.
%p 
  The web interface is limited to displaying the first 1000 results of a query.
  = get_tap_download_limit_msg

.form-container{ 'ng-controller' => 'SearchController', 'ng-init' => "init('#rect_modal')" }
  %form#rectangular_search_form.cancel{ name: 'rectangular_search_form', 'ng-submit' => "fetchResults('rectangular_search_form', '#{rectangular_search_path}')", novalidate: '' }
    %fieldset
      .row-fluid
        .span6
          %label{ for: :catalogue }
            SkyMapper survey:
          %select#catalogue{ 'ng-model' => 'form.catalogue', name: 'catalogue', required: '',
            'ng-init' => "setInput('catalogue', '#{session_param('rectangular', :catalogue)}')" }
            %option{ value: :fs }
              Five-Second Survey
            %option{ value: :ms }
              Main Survey
          %ul.error{ 'ng-show' => '(submitted || rectangular_search_form.catalogue.$dirty) && rectangular_search_form.catalogue.$invalid' }
            %li.error{ 'ng-show' => 'rectangular_search_form.catalogue.$error.required' }
              This field is required.

      .row-fluid
        .span6
          %label{ for: :ra_min }
            Right ascension min (deg):
          %input#ra_min{ type: 'text', name: 'ra_min', 'ng-model' => 'form.ra_min', required: '', ravalidate: '', rarange: '[0, 360)',
            'ng-init' => "setInput('ra_min', '#{session_param('rectangular', :ra_min)}')" }
          %ul.error{ 'ng-show' => '(submitted || rectangular_search_form.ra_min.$dirty) && rectangular_search_form.ra_min.$invalid' }
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_min.$error.required' }
              This field is required.
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_min.$error.ravalidate' }
              This field should be a number in one of the following formats HH:MM:SS.S or HH MM SS.S or DDD.DD.
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_min.$error.rarange' }
              Value in degrees should be in range [0, 360).

        .span6
          %label{ for: :ra_max }
            Right ascension max (deg):
          %input#ra_max{ type: 'text', name: 'ra_max', 'ng-model' => 'form.ra_max', required: '', ravalidate: '', rarange: "{{form.ra_min | isRa:'(':'[0'}}, 360)",
             'dependent-on' => 'form.ra_min', 'ng-init' => "setInput('ra_max', '#{session_param('rectangular', :ra_max)}')" }
          %ul.error{ 'ng-show' => '(submitted || rectangular_search_form.ra_max.$dirty) && rectangular_search_form.ra_max.$invalid' }
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_max.$error.required' }
              This field is required.
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_max.$error.ravalidate' }
              This field should be a number in one of the following formats HH:MM:SS.S or HH MM SS.S or DDD.DD.
            %li.error{ 'ng-show' => 'rectangular_search_form.ra_max.$error.rarange' }
              This field should be a number greater than {{form.ra_min | isRa:'':'or equal to 0'}} and less than 360.


      .row-fluid
        .span6
          %label{ for: :dec_min }
            Declination min (deg):
          %input#dec_min{ type: 'text', name: 'dec_min', 'ng-model' => 'form.dec_min', required: '',decvalidate: '',  decrange: '[-90, 90]',
            'ng-init' => "setInput('dec_min', '#{session_param('rectangular', :dec_min)}')" }
          %ul.error{ 'ng-show' => '(submitted || rectangular_search_form.dec_min.$dirty) && rectangular_search_form.dec_min.$invalid' }
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_min.$error.required' }
              This field is required.
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_min.$error.decrange' }
              Value in degrees should be a number greater than or equal to -90 and less than or equal to 90.
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_min.$error.decvalidate' }
              This field should be a number in one of the following formats DD:MM:SS.S or DD MM SS.S or DDD.DD.

        .span6
          %label{ for: :dec_max }
            Declination max (deg):
          %input#dec_max{ type: 'text', name: 'dec_max', 'ng-model' => 'form.dec_max', required: '', decrange: "{{form.dec_min | isDec:'(':'[-90'}}, 90]",
            decvalidate: '', 'dependent-on' => 'form.dec_min', 'ng-init' => "setInput('dec_max', '#{session_param('rectangular', :dec_max)}')" }
          %ul.error{ 'ng-show' => '(submitted || rectangular_search_form.dec_max.$dirty) && rectangular_search_form.dec_max.$invalid' }
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_max.$error.required' }
              This field is required.
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_max.$error.decrange' }
              This field should be a number greater than {{form.dec_min | isDec:'':'or equal to -90'}} and less than or equal to 90.
            %li.error{ 'ng-show' => 'rectangular_search_form.dec_max.$error.decvalidate' }
              This field should be a number in one of the following formats DD:MM:SS.S or DD MM SS.S or DDD.DD.

      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'u', type: 'rectangular' }
      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'v', type: 'rectangular' }
      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'g', type: 'rectangular' }
      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'r', type: 'rectangular' }
      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'i', type: 'rectangular' }
      = render partial: 'search_filter', locals: { form: 'rectangular_search_form', filter: 'z', type: 'rectangular' }

    .form-actions
      %input.btn.btn-primary{ type: 'submit', value: 'Search SkyMapper' }
      = check_box_tag 'async', nil, false,'ng-model' => 'form.async'
      = label_tag 'async', 'Asynchronous Query'

      = render partial: 'async_popup', locals: { form: 'rectangular_search_form', modal_id: 'rect_modal' }

  %table#results.table.table-striped.table-condensed
    %thead
      %tr
        %td{ 'ng-repeat' => '(field, value) in objects[0]' }
          {{field}}
    %tbody
      %tr{ 'ng-repeat' => 'obj in objects' }
        %td{ 'ng-repeat' => '(field, value) in obj' }
          {{value}}


